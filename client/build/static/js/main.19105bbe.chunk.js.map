{"version":3,"sources":["App.js","util/parse-logs.js","components/TeamTable.js","components/Summary.js","components/LootTable.js","RaidDataDisplay.js","index.js"],"names":["window","jQuery","$","global","App","className","Component","_","require","getMyDrops","logs","playerName","lootDrops","i","forEach","d","specialLootReceiver","push","raidNumber","item","specialLoot","itemReceiver","module","exports","getLogData","parsedLogs","replace","trim","JSON","parse","parseLogs","myDeaths","otherDeaths","myLootDrops","totalLootDrops","playerNums","playerDeaths","playerLootDrops","playerRaids","players","key","row","p","toLowerCase","playerNumber","tempPlayers","clone","otherPlayers","remove","x","o","currentPlayer","calcDeaths","name","total","deaths","averageDeaths","toFixed","console","log","summary","totalRaids","length","otherPlayerDeaths","loot","TeamTable","props","toggleDirection","column","direction","state","setState","previousState","getSortedRanking","ranking","data","sortBy","reverse","this","Table","sortable","celled","fixed","unstackable","Header","Row","HeaderCell","sorted","onClick","Icon","Body","styles","map","tableData","Cell","ResultTable","Grid","columns","Column","width","textAlign","onMyLootChange","event","filteredData","checked","filter","r","rsn","myLoot","currentData","Form","Field","Checkbox","toggle","label","onChange","RaidDataDisplay","selectedFileName","uploadFile","bind","setRSN","resetState","value","location","reload","target","files","selectedFile","file","reader","FileReader","scope","onload","parsedData","result","readAsText","buttonProps","disabled","panes","menuItem","render","LootTable","as","icon","circular","Content","centered","GridRow","GridColumn","Input","placeholder","InputFile","button","input","id","accept","Button","animated","hidden","visible","Summary","Tab","Segment","href","React","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.19105bbe.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport './App.css';\r\nimport RaidDataDisplay from \"./RaidDataDisplay\";\r\nimport $ from 'jquery';\r\n\r\nwindow.jQuery = $;\r\nwindow.$ = $;\r\nglobal.jQuery = $;\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <RaidDataDisplay/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","var _ = require('lodash');\r\n\r\nconst parseLogs = (logs) => {\r\n    logs = logs.replace(/ /g, ' ');\r\n    logs = logs.replace(/[^\\x00-\\x7F]/g, \"\");\r\n    logs = logs.trim();\r\n    logs = logs.replace(/\\n/g, ',\\n');\r\n    logs = '[' + logs + ']';\r\n\r\n    return JSON.parse(logs);\r\n};\r\n\r\nconst getMyDrops = (logs, playerName) => {\r\n    let lootDrops = [];\r\n    let i = 1;\r\n\r\n    logs.forEach(d => {\r\n        if (d.specialLootReceiver) {\r\n            lootDrops.push({raidNumber: i, item: d.specialLoot, itemReceiver: d.specialLootReceiver})\r\n        }\r\n        i++\r\n    });\r\n    return lootDrops\r\n};\r\n\r\nconst getLogData = (logs, playerName) => {\r\n    let parsedLogs = parseLogs(logs);\r\n    let myDeaths = 0;\r\n    let otherDeaths = 0;\r\n    let myLootDrops = 0;\r\n    let totalLootDrops = 0;\r\n\r\n    const playerNums = [1, 2, 3, 4, 5];\r\n    let playerDeaths = {};\r\n    let playerLootDrops = {};\r\n    let playerRaids = {};\r\n    let players = [];\r\n\r\n    const calcDeaths = (playerNumber, row) => {\r\n        if (row.specialLootReceiver === playerName) {\r\n            myLootDrops++;\r\n        }\r\n        var tempPlayers = _.clone(playerNums);\r\n        let otherPlayers = _.remove(tempPlayers, (x) => {\r\n            return x !== playerNumber\r\n        });\r\n\r\n        myDeaths += row['tobPlayer' + playerNumber + 'DeathCount'];\r\n        otherPlayers.forEach(o => {\r\n            let currentPlayer = row['tobPlayer' + o];\r\n            if (currentPlayer) {\r\n                // Count loot drops\r\n                if (row.specialLootReceiver === currentPlayer) {\r\n                    (playerLootDrops[currentPlayer]) ? playerLootDrops[currentPlayer]++ : playerLootDrops[currentPlayer] = 1;\r\n                }\r\n\r\n                // Count deaths\r\n                (playerDeaths[currentPlayer]) ? playerDeaths[currentPlayer] += row['tobPlayer' + o + 'DeathCount'] : playerDeaths[currentPlayer] = 1;\r\n\r\n                // Count total raids\r\n                (playerRaids[currentPlayer]) ? playerRaids[currentPlayer]++ : playerRaids[currentPlayer] = 1;\r\n            }\r\n            otherDeaths += row['tobPlayer' + o + 'DeathCount']\r\n        })\r\n    };\r\n\r\n    parsedLogs.forEach(row => {\r\n        if(row.specialLootReceiver) {\r\n            if (row.specialLootReceiver === playerName) {\r\n                myLootDrops++;\r\n            }\r\n            totalLootDrops++;\r\n        }\r\n\r\n\r\n        playerNums.forEach(p => {\r\n            if (row['tobPlayer' + p].toLowerCase() === playerName.toLowerCase()) {\r\n                calcDeaths(p, row)\r\n            }\r\n        });\r\n    });\r\n\r\n    for (var key in playerDeaths) {\r\n        players.push({\r\n            name: key,\r\n            total: playerRaids[key],\r\n            deaths: playerDeaths[key],\r\n            lootDrops: playerLootDrops[key] || 0,\r\n            averageDeaths: (playerDeaths[key] / playerRaids[key]).toFixed(2)\r\n        })\r\n    }\r\n\r\n    console.log(myLootDrops)\r\n    return {\r\n        summary: {\r\n            totalRaids: parsedLogs.length,\r\n            deaths: myDeaths,\r\n            averageDeaths: (myDeaths / parsedLogs.length).toFixed(2),\r\n            otherPlayerDeaths: otherDeaths,\r\n            myLootDrops: myLootDrops,\r\n            totalLootDrops: totalLootDrops\r\n        },\r\n        loot: getMyDrops(parsedLogs, playerName),\r\n        otherPlayers: players\r\n    }\r\n};\r\n\r\n\r\nmodule.exports.getLogData = getLogData;","import React, {Component} from 'react';\r\nimport {Icon, Table} from \"semantic-ui-react\";\r\nimport _ from \"lodash\";\r\n\r\nclass TeamTable extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            column: 'total',\r\n            direction: {\r\n                name: 'ascending',\r\n                total: 'descending',\r\n                deaths: 'ascending',\r\n                averageDeaths: 'ascending',\r\n                lootDrops: 'ascending'\r\n            }\r\n        };\r\n    }\r\n\r\n    toggleDirection = column => {\r\n        const direction = this.state.direction[column];\r\n        this.setState(previousState => {\r\n            return {\r\n                ...previousState,\r\n                column: column,\r\n                direction: {\r\n                    ...previousState.direction,\r\n                    [column]: direction === 'ascending' ? 'descending' : 'ascending'\r\n                }\r\n            };\r\n        });\r\n    };\r\n\r\n    getSortedRanking = (ranking, column, direction) => {\r\n        let data = _.sortBy(ranking, column);\r\n        if (direction === 'descending') {\r\n            data.reverse();\r\n        }\r\n        return data;\r\n    };\r\n\r\n    render() {\r\n        const {column, direction} = this.state;\r\n        return (\r\n            <Table sortable celled fixed unstackable>\r\n                <Table.Header>\r\n                    <Table.Row>\r\n                        <Table.HeaderCell\r\n                            sorted={column === 'name' ? direction.name : null}\r\n                            onClick={() => this.toggleDirection('name')}\r\n                        >\r\n                            <Icon name=\"trophy\"/>Name\r\n                        </Table.HeaderCell>\r\n                        <Table.HeaderCell\r\n                            sorted={column === 'total' ? direction.total : null}\r\n                            onClick={() => this.toggleDirection('total')}\r\n                        >\r\n                            <Icon name=\"user\"/>Total Raids\r\n                        </Table.HeaderCell>\r\n                        <Table.HeaderCell\r\n                            sorted={column === 'deaths' ? direction.deaths : null}\r\n                            onClick={() => this.toggleDirection('deaths')}\r\n                        >\r\n                            <Icon name=\"star\"/>Deaths\r\n                        </Table.HeaderCell>\r\n                        <Table.HeaderCell\r\n                            sorted={column === 'averageDeaths' ? direction.averageDeaths : null}\r\n                            onClick={() => this.toggleDirection('averageDeaths')}\r\n                        >\r\n                            <Icon name=\"bomb\"/>Average Deaths\r\n                        </Table.HeaderCell>\r\n                        <Table.HeaderCell\r\n                            sorted={column === 'lootDrops' ? direction.lootDrops : null}\r\n                            onClick={() => this.toggleDirection('lootDrops')}\r\n                        >\r\n                            <Icon name=\"gift\"/>Loot Drops\r\n                        </Table.HeaderCell>\r\n                    </Table.Row>\r\n                </Table.Header>\r\n                <Table.Body styles={{'max-height': '85vh'}}>\r\n                    {_.map(\r\n                        this.getSortedRanking(this.props.tableData, column, direction[column]),\r\n                        ({name, total, deaths, averageDeaths, lootDrops}) => (\r\n                            <Table.Row key={name}>\r\n                                <Table.Cell>{name}</Table.Cell>\r\n                                <Table.Cell>{total}</Table.Cell>\r\n                                <Table.Cell>{deaths}</Table.Cell>\r\n                                <Table.Cell>{averageDeaths}</Table.Cell>\r\n                                <Table.Cell>{lootDrops}</Table.Cell>\r\n                            </Table.Row>\r\n                        )\r\n                    )}\r\n                </Table.Body>\r\n            </Table>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TeamTable","import React, {Component} from 'react';\r\nimport {Grid} from \"semantic-ui-react\";\r\n\r\nclass ResultTable extends Component {\r\n    render() {\r\n        return (<Grid columns={16}>\r\n            <Grid.Row>\r\n                <Grid.Column width={4} textAlign={\"right\"}>\r\n                    <b>Total Raids</b>\r\n                </Grid.Column>\r\n                <Grid.Column width={4}>\r\n                    {this.props.summary.totalRaids}\r\n                </Grid.Column>\r\n                <Grid.Column width={4} textAlign={\"right\"}>\r\n                    <b>Total Deaths</b>\r\n                </Grid.Column>\r\n                <Grid.Column width={4}>\r\n                    {this.props.summary.deaths}\r\n                </Grid.Column>\r\n            </Grid.Row>\r\n            <Grid.Row>\r\n                <Grid.Column width={4} textAlign={\"right\"}>\r\n                    <b>Average Deaths</b>\r\n                </Grid.Column>\r\n                <Grid.Column width={4}>\r\n                    {this.props.summary.averageDeaths}\r\n                </Grid.Column>\r\n                <Grid.Column width={4} textAlign={\"right\"}>\r\n                    <b>Other Player Deaths</b>\r\n                </Grid.Column>\r\n                <Grid.Column width={4}>\r\n                    {this.props.summary.otherPlayerDeaths}\r\n                </Grid.Column>\r\n            </Grid.Row>\r\n            <Grid.Row>\r\n                <Grid.Column width={4} textAlign={\"right\"}>\r\n                    <b>My Loot Drops</b>\r\n                </Grid.Column>\r\n                <Grid.Column width={4}>\r\n                    {this.props.summary.myLootDrops}\r\n                </Grid.Column>\r\n                <Grid.Column width={4} textAlign={\"right\"}>\r\n                    <b>Total Loot Drops</b>\r\n                </Grid.Column>\r\n                <Grid.Column width={4}>\r\n                    {this.props.summary.totalLootDrops}\r\n                </Grid.Column>\r\n            </Grid.Row>\r\n\r\n        </Grid>)\r\n    }\r\n}\r\n\r\nexport default ResultTable","import React, {Component} from 'react';\r\nimport {Checkbox, Form, Icon, Table} from \"semantic-ui-react\";\r\nimport _ from \"lodash\";\r\n\r\nclass ResultTable extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            myLoot: false,\r\n            column: 'raidNumber',\r\n            currentData: this.props.tableData,\r\n            direction: {\r\n                raidNumber: 'ascending',\r\n                item: 'ascending',\r\n                itemReceiver: 'ascending'\r\n            }\r\n        };\r\n    }\r\n\r\n    toggleDirection = column => {\r\n        const direction = this.state.direction[column];\r\n        this.setState(previousState => {\r\n            return {\r\n                ...previousState,\r\n                column: column,\r\n                direction: {\r\n                    ...previousState.direction,\r\n                    [column]: direction === 'ascending' ? 'descending' : 'ascending'\r\n                }\r\n            };\r\n        });\r\n    };\r\n\r\n    getSortedRanking = (ranking, column, direction) => {\r\n        let data = _.sortBy(ranking, column);\r\n        if (direction === 'descending') {\r\n            data.reverse();\r\n        }\r\n        return data;\r\n    };\r\n    onMyLootChange = (event, data) => {\r\n        let filteredData = this.props.tableData;\r\n        if (data.checked) {\r\n            filteredData = this.props.tableData.filter(r => {\r\n                return r.itemReceiver.toLowerCase() === this.props.rsn.toLowerCase()\r\n            });\r\n        }\r\n        this.setState({myLoot: data.checked, currentData: filteredData})\r\n    };\r\n\r\n    render() {\r\n        const {column, direction} = this.state;\r\n        return (\r\n            <>\r\n                <br/>\r\n                <Form>\r\n                    <Form.Field>\r\n                        <Checkbox checked={this.state.myLoot} toggle label='My loot' onChange={this.onMyLootChange}/>\r\n                    </Form.Field>\r\n                </Form>\r\n                <Table sortable celled fixed unstackable>\r\n                    <Table.Header>\r\n                        <Table.Row>\r\n                            <Table.HeaderCell\r\n                                sorted={column === 'raidNumber' ? direction.raidNumber : null}\r\n                                onClick={() => this.toggleDirection('raidNumber')}\r\n                            >\r\n                                <Icon name=\"hashtag\"/>Raid Number\r\n                            </Table.HeaderCell>\r\n                            <Table.HeaderCell\r\n                                sorted={column === 'item' ? direction.item : null}\r\n                                onClick={() => this.toggleDirection('item')}\r\n                            >\r\n                                <Icon name=\"gift\"/>Item\r\n                            </Table.HeaderCell>\r\n                            <Table.HeaderCell\r\n                                sorted={column === 'itemReceiver' ? direction.itemReceiver : null}\r\n                                onClick={() => this.toggleDirection('itemReceiver')}\r\n                            >\r\n                                <Icon name=\"user\"/>Item Receiver\r\n                            </Table.HeaderCell>\r\n                        </Table.Row>\r\n                    </Table.Header>\r\n                    <Table.Body styles={{'max-height': '85vh'}}>\r\n                        {_.map(\r\n                            this.getSortedRanking(this.state.currentData, column, direction[column]),\r\n                            ({raidNumber, item, itemReceiver}) => (\r\n                                <Table.Row key={raidNumber}>\r\n                                    <Table.Cell>{raidNumber}</Table.Cell>\r\n                                    <Table.Cell>{item}</Table.Cell>\r\n                                    <Table.Cell>{itemReceiver}</Table.Cell>\r\n                                </Table.Row>\r\n                            )\r\n                        )}\r\n                    </Table.Body>\r\n                </Table>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ResultTable","import React from 'react';\r\nimport {InputFile} from 'semantic-ui-react-input-file'\r\nimport {getLogData} from \"./util/parse-logs\";\r\nimport {Button, Grid, GridColumn, GridRow, Header, Icon, Input, Segment, Tab} from \"semantic-ui-react\";\r\nimport TeamTable from \"./components/TeamTable\";\r\nimport Summary from \"./components/Summary\";\r\nimport LootTable from \"./components/LootTable\";\r\nimport './App.css';\r\n\r\nclass RaidDataDisplay extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {selectedFileName: 'None', rsn: ''};\r\n        this.uploadFile = this.uploadFile.bind(this);\r\n        this.setRSN = this.setRSN.bind(this);\r\n        this.resetState = this.resetState.bind(this);\r\n    }\r\n\r\n    setRSN(event, data) {\r\n        this.setState({rsn: data.value});\r\n    }\r\n\r\n    resetState(event) {\r\n        window.location.reload();\r\n        // this.setState({selectedFileName: 'None', rsn: '', parsedData: undefined, selectedFile: undefined,});\r\n        // this.forceUpdate()\r\n    }\r\n\r\n    uploadFile(event) {\r\n        this.setState({selectedFileName: event.target.files[0].name, selectedFile: event.target.files[0]});\r\n\r\n        var file = event.target.files[0];\r\n        var reader = new FileReader();\r\n        const scope = this;\r\n        reader.onload = function (event) {\r\n            scope.setState({parsedData: getLogData(event.target.result, scope.state.rsn)});\r\n        };\r\n\r\n        reader.readAsText(file);\r\n    }\r\n\r\n    render() {\r\n        let buttonProps = {disabled: !this.state.rsn};\r\n        const panes = [\r\n            {menuItem: 'Teammates', render: () => <TeamTable tableData={this.state.parsedData.otherPlayers}/>},\r\n            {menuItem: 'Loot', render: () => <LootTable tableData={this.state.parsedData.loot} rsn={this.state.rsn}/>},\r\n        ]\r\n\r\n        return (<div className='page-container'>\r\n            <div className='content-wrapper'>\r\n            <Header as='h2' icon textAlign='center'>\r\n                <Icon name='cogs' circular/>\r\n                <Header.Content>ToB Parser</Header.Content>\r\n            </Header>\r\n            <Grid centered columns={2} >\r\n                <GridRow><small><i>Select your raid tracker log file found at: C:\\Users\\[WINDOWS\r\n                    USER]\\.runelite\\raid-data tracker\\[RS LOGIN]\\tob\\raid_tracker_data.log</i></small></GridRow>\r\n                <GridRow>\r\n                    <GridColumn textAlign={\"right\"}>\r\n                        <Input placeholder='Enter RSN...' value={this.state.rsn} onChange={this.setRSN}/>\r\n                    </GridColumn>\r\n                    <GridColumn>\r\n                        <InputFile\r\n                            button={{...buttonProps}}\r\n                            input={{\r\n                                id: 'input-control-id',\r\n                                accept: \".log\",\r\n                                onChange: this.uploadFile\r\n                            }}\r\n                        />\r\n                        <Button animated='vertical' onClick={this.resetState}>\r\n                            <Button.Content hidden>Reset</Button.Content>\r\n                            <Button.Content visible>\r\n                                <Icon name='redo'/>\r\n                            </Button.Content>\r\n                        </Button>\r\n                    </GridColumn>\r\n                </GridRow>\r\n                {this.state.parsedData && <Summary summary={this.state.parsedData.summary}/>}\r\n            </Grid>\r\n            <Grid centered columns={16}>\r\n                <GridRow>\r\n                    <GridColumn width={14}>\r\n                        {this.state.parsedData && <Tab panes={panes}/>}\r\n                    </GridColumn>\r\n                </GridRow>\r\n            </Grid>\r\n            </div>\r\n            <Segment className=\"Footer\">\r\n                <small><i>This is an open source project. Repository found at: <a href=\"https://github.com/jimma-rs/tob-parser\">https://github.com/jimma-rs/tob-parser </a></i></small>\r\n            </Segment>\r\n        </div>)\r\n    }\r\n}\r\n\r\nexport default RaidDataDisplay","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport 'semantic-ui-css/semantic.min.css'\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App/>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);"],"sourceRoot":""}