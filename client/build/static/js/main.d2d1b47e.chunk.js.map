{"version":3,"sources":["App.js","parse-logs.js","ResultTable.js","Summary.js","LootTable.js","FileSelect.js","reportWebVitals.js","index.js"],"names":["window","jQuery","$","global","App","className","Component","_","require","getMyDrops","logs","playerName","lootDrops","i","forEach","d","specialLootReceiver","push","raidNumber","item","specialLoot","itemReceiver","module","exports","getLogData","parsedLogs","trim","replace","JSON","parse","parseLogs","myDeaths","otherDeaths","playerNums","playerDeaths","playerRaids","players","key","log","p","toLowerCase","playerNumber","row","tempPlayers","clone","otherPlayers","remove","x","o","calcDeaths","name","total","deaths","averageDeaths","toFixed","loot","totalRaids","length","otherPlayerDeaths","ResultTable","props","toggleDirection","column","direction","state","setState","previousState","getSortedRanking","ranking","data","sortBy","reverse","this","Table","sortable","celled","fixed","unstackable","Header","Row","HeaderCell","sorted","onClick","Icon","Body","styles","map","tableData","Cell","Grid","columns","Column","width","textAlign","summary","onMyLootChange","event","filteredData","checked","filter","r","rsn","myLoot","currentData","Form","Field","Checkbox","toggle","label","onChange","FileSelect","selectedFileName","uploadFile","bind","setRSN","resetState","value","parsedData","undefined","selectedFile","forceUpdate","target","files","file","reader","FileReader","scope","onload","result","readAsText","buttonProps","disabled","panes","menuItem","render","LootTable","as","icon","circular","Content","centered","ui","grid","GridRow","GridColumn","Input","placeholder","InputFile","button","input","id","accept","Button","animated","hidden","visible","Summary","Tab","React","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d2d1b47e.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport './App.css';\r\nimport FileSelect from \"./FileSelect\";\r\nimport $ from 'jquery';\r\n\r\nwindow.jQuery = $;\r\nwindow.$ = $;\r\nglobal.jQuery = $;\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <FileSelect/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","var _ = require('lodash');\r\n\r\nconst parseLogs = (logs) => {\r\n  logs = logs.trim();\r\n  logs = logs.replace(/\\n/g, ',\\n')\r\n  logs = '[' + logs + ']';\r\n\r\n  return JSON.parse(logs);\r\n};\r\n\r\nconst getMyDrops = (logs, playerName) => {\r\n  let lootDrops = [];\r\n  let i = 1;\r\n\r\n  logs.forEach(d => {\r\n    if(d.specialLootReceiver) {\r\n      lootDrops.push({raidNumber:i, item:d.specialLoot, itemReceiver:d.specialLootReceiver})\r\n    }\r\n    i++\r\n  });\r\n  return lootDrops\r\n};\r\n\r\nconst getLogData = (logs, playerName) => {\r\n  let parsedLogs = parseLogs(logs);\r\n  let myDeaths = 0;\r\n  let otherDeaths = 0;\r\n\r\n  const playerNums = [1, 2, 3, 4, 5];\r\n  let playerDeaths = {};\r\n  let playerRaids = {};\r\n  let players = [];\r\n\r\n  const calcDeaths = (playerNumber, row) => {\r\n    var tempPlayers = _.clone(playerNums);\r\n    let otherPlayers = _.remove(tempPlayers, (x) => {\r\n      return x !== playerNumber\r\n    });\r\n\r\n    myDeaths += row['tobPlayer' + playerNumber + 'DeathCount'];\r\n    otherPlayers.forEach(o => {\r\n\r\n      if (row['tobPlayer' + o]) {\r\n        if (playerDeaths[row['tobPlayer' + o]]) {\r\n          playerDeaths[row['tobPlayer' + o]] += row['tobPlayer' + o + 'DeathCount'];\r\n        } else {\r\n          playerDeaths[row['tobPlayer' + o]] = 1;\r\n        }\r\n        if (playerRaids[row['tobPlayer' + o]]) {\r\n          playerRaids[row['tobPlayer' + o]]++;\r\n        } else {\r\n          playerRaids[row['tobPlayer' + o]] = 1;\r\n        }\r\n      }\r\n\r\n      otherDeaths += row['tobPlayer' + o + 'DeathCount']\r\n    })\r\n  };\r\n\r\n  parsedLogs.forEach(log => {\r\n    playerNums.forEach(p => {\r\n      if (log['tobPlayer' + p].toLowerCase() === playerName.toLowerCase()) {\r\n        calcDeaths(p, log)\r\n      }\r\n    });\r\n  });\r\n\r\n  for (var key in playerDeaths) {\r\n    players.push({\r\n      name: key,\r\n      total: playerRaids[key],\r\n      deaths: playerDeaths[key],\r\n      averageDeaths: (playerDeaths[key] / playerRaids[key]).toFixed(2)\r\n    })\r\n  }\r\n\r\n  return {\r\n    loot: getMyDrops(parsedLogs, playerName),\r\n    totalRaids: parsedLogs.length,\r\n    deaths: myDeaths,\r\n    averageDeaths: (myDeaths/parsedLogs.length).toFixed(2),\r\n    otherPlayerDeaths: otherDeaths,\r\n    otherPlayers: players}\r\n};\r\n\r\n\r\n\r\nmodule.exports.getLogData = getLogData;","import React, {Component} from 'react';\r\nimport {Icon, Table} from \"semantic-ui-react\";\r\nimport _ from \"lodash\";\r\n\r\nclass ResultTable extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      column: 'total',\r\n      direction: {\r\n        name: 'ascending',\r\n        total: 'descending',\r\n        deaths: 'ascending',\r\n        averageDeaths: 'ascending'\r\n      }\r\n    };\r\n  }\r\n\r\n  toggleDirection = column => {\r\n    const direction = this.state.direction[column];\r\n    this.setState(previousState => {\r\n      return {\r\n        ...previousState,\r\n        column: column,\r\n        direction: {\r\n          ...previousState.direction,\r\n          [column]: direction === 'ascending' ? 'descending' : 'ascending'\r\n        }\r\n      };\r\n    });\r\n  };\r\n\r\n  getSortedRanking = (ranking, column, direction) => {\r\n    let data = _.sortBy(ranking, column);\r\n    if (direction === 'descending') {\r\n      data.reverse();\r\n    }\r\n    return data;\r\n  };\r\n\r\n  render() {\r\n    const {column, direction} = this.state;\r\n    return (\r\n      <Table sortable celled fixed unstackable>\r\n        <Table.Header>\r\n          <Table.Row>\r\n            <Table.HeaderCell\r\n              sorted={column === 'name' ? direction.name : null}\r\n              onClick={() => this.toggleDirection('name')}\r\n            >\r\n              <Icon name=\"trophy\"/>Name\r\n            </Table.HeaderCell>\r\n            <Table.HeaderCell\r\n              sorted={column === 'total' ? direction.total : null}\r\n              onClick={() => this.toggleDirection('total')}\r\n            >\r\n              <Icon name=\"user\"/>Total Raids\r\n            </Table.HeaderCell>\r\n            <Table.HeaderCell\r\n              sorted={column === 'deaths' ? direction.deaths : null}\r\n              onClick={() => this.toggleDirection('deaths')}\r\n            >\r\n              <Icon name=\"star\"/>Deaths\r\n            </Table.HeaderCell>\r\n            <Table.HeaderCell\r\n              sorted={column === 'averageDeaths' ? direction.averageDeaths : null}\r\n              onClick={() => this.toggleDirection('averageDeaths')}\r\n            >\r\n              <Icon name=\"bomb\"/>Average Deaths\r\n            </Table.HeaderCell>\r\n          </Table.Row>\r\n        </Table.Header>\r\n        <Table.Body styles={{'max-height': '85vh'}}>\r\n          {_.map(\r\n            this.getSortedRanking(this.props.tableData, column, direction[column]),\r\n            ({name, total, deaths, averageDeaths}) => (\r\n              <Table.Row key={name}>\r\n                <Table.Cell>{name}</Table.Cell>\r\n                <Table.Cell>{total}</Table.Cell>\r\n                <Table.Cell>{deaths}</Table.Cell>\r\n                <Table.Cell>{averageDeaths}</Table.Cell>\r\n              </Table.Row>\r\n            )\r\n          )}\r\n        </Table.Body>\r\n      </Table>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ResultTable","import React, {Component} from 'react';\r\nimport {Grid} from \"semantic-ui-react\";\r\n\r\nclass ResultTable extends Component {\r\n  render() {\r\n    return (<Grid columns={2}>\r\n      <Grid.Row>\r\n        <Grid.Column width={8} textAlign={\"right\"}>\r\n          <b>Total Raids</b>\r\n        </Grid.Column>\r\n        <Grid.Column width={8}>\r\n          {this.props.summary.totalRaids}\r\n        </Grid.Column>\r\n      </Grid.Row>\r\n\r\n      <Grid.Row>\r\n        <Grid.Column width={8}  textAlign={\"right\"}>\r\n          <b>Total Deaths</b>\r\n        </Grid.Column>\r\n        <Grid.Column width={8}>\r\n          {this.props.summary.deaths}\r\n        </Grid.Column>\r\n      </Grid.Row>\r\n      <Grid.Row>\r\n        <Grid.Column width={8}  textAlign={\"right\"}>\r\n          <b>Average Deaths</b>\r\n        </Grid.Column>\r\n        <Grid.Column width={8}>\r\n          {this.props.summary.averageDeaths}\r\n        </Grid.Column>\r\n      </Grid.Row>\r\n      <Grid.Row>\r\n        <Grid.Column width={8}  textAlign={\"right\"}>\r\n          <b>Other Player Deaths</b>\r\n        </Grid.Column>\r\n        <Grid.Column width={8}>\r\n          {this.props.summary.otherPlayerDeaths}\r\n        </Grid.Column>\r\n      </Grid.Row>\r\n\r\n    </Grid>)\r\n  }\r\n}\r\n\r\nexport default ResultTable","import React, {Component} from 'react';\r\nimport {Checkbox, Form, Icon, Table} from \"semantic-ui-react\";\r\nimport _ from \"lodash\";\r\n\r\nclass ResultTable extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            myLoot: false,\r\n            column: 'raidNumber',\r\n            currentData: this.props.tableData,\r\n            direction: {\r\n                raidNumber: 'ascending',\r\n                item: 'ascending',\r\n                itemReceiver: 'ascending'\r\n            }\r\n        };\r\n    }\r\n\r\n    toggleDirection = column => {\r\n        const direction = this.state.direction[column];\r\n        this.setState(previousState => {\r\n            return {\r\n                ...previousState,\r\n                column: column,\r\n                direction: {\r\n                    ...previousState.direction,\r\n                    [column]: direction === 'ascending' ? 'descending' : 'ascending'\r\n                }\r\n            };\r\n        });\r\n    };\r\n\r\n    getSortedRanking = (ranking, column, direction) => {\r\n        let data = _.sortBy(ranking, column);\r\n        if (direction === 'descending') {\r\n            data.reverse();\r\n        }\r\n        return data;\r\n    };\r\n    onMyLootChange = (event, data) => {\r\n      let filteredData = this.props.tableData;\r\n      if(data.checked) {\r\n        filteredData = this.props.tableData.filter(r => {\r\n          return r.itemReceiver.toLowerCase() === this.props.rsn.toLowerCase()\r\n        });\r\n      }\r\n      this.setState({myLoot: data.checked, currentData:filteredData})\r\n    };\r\n\r\n    render() {\r\n        const {column, direction} = this.state;\r\n        return (\r\n            <>\r\n              <br/>\r\n              <Form>\r\n                <Form.Field>\r\n                  <Checkbox checked={this.state.myLoot} toggle label='My loot' onChange={this.onMyLootChange}/>\r\n                </Form.Field>\r\n              </Form>\r\n            <Table sortable celled fixed unstackable>\r\n                <Table.Header>\r\n                    <Table.Row>\r\n                        <Table.HeaderCell\r\n                            sorted={column === 'raidNumber' ? direction.raidNumber : null}\r\n                            onClick={() => this.toggleDirection('raidNumber')}\r\n                        >\r\n                            <Icon name=\"hashtag\"/>Raid Number\r\n                        </Table.HeaderCell>\r\n                        <Table.HeaderCell\r\n                            sorted={column === 'item' ? direction.item : null}\r\n                            onClick={() => this.toggleDirection('item')}\r\n                        >\r\n                            <Icon name=\"gift\"/>Item\r\n                        </Table.HeaderCell>\r\n                        <Table.HeaderCell\r\n                            sorted={column === 'itemReceiver' ? direction.itemReceiver : null}\r\n                            onClick={() => this.toggleDirection('itemReceiver')}\r\n                        >\r\n                            <Icon name=\"user\"/>Item Receiver\r\n                        </Table.HeaderCell>\r\n                    </Table.Row>\r\n                </Table.Header>\r\n                <Table.Body styles={{'max-height': '85vh'}}>\r\n                    {_.map(\r\n                        this.getSortedRanking(this.state.currentData, column, direction[column]),\r\n                        ({raidNumber, item, itemReceiver}) => (\r\n                            <Table.Row key={raidNumber}>\r\n                                <Table.Cell>{raidNumber}</Table.Cell>\r\n                                <Table.Cell>{item}</Table.Cell>\r\n                                <Table.Cell>{itemReceiver}</Table.Cell>\r\n                            </Table.Row>\r\n                        )\r\n                    )}\r\n                </Table.Body>\r\n            </Table>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ResultTable","import React from 'react';\r\nimport {InputFile} from 'semantic-ui-react-input-file'\r\nimport {getLogData} from \"./parse-logs\";\r\nimport {Button, Grid, GridColumn, GridRow, Header, Icon, Input, Tab} from \"semantic-ui-react\";\r\nimport ResultTable from \"./ResultTable\";\r\nimport Summary from \"./Summary\";\r\nimport LootTable from \"./LootTable\";\r\n\r\nclass FileSelect extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {selectedFileName: 'None', rsn: ''};\r\n        this.uploadFile = this.uploadFile.bind(this);\r\n        this.setRSN = this.setRSN.bind(this);\r\n        this.resetState = this.resetState.bind(this);\r\n    }\r\n\r\n    setRSN(event, data) {\r\n        this.setState({rsn: data.value});\r\n    }\r\n\r\n    resetState(event) {\r\n        this.setState({selectedFileName: 'None', rsn: '', parsedData: undefined, selectedFile: undefined,});\r\n        this.forceUpdate()\r\n    }\r\n\r\n    uploadFile(event) {\r\n        this.setState({selectedFileName: event.target.files[0].name, selectedFile: event.target.files[0]});\r\n\r\n        var file = event.target.files[0];\r\n        var reader = new FileReader();\r\n        const scope = this;\r\n        reader.onload = function (event) {\r\n            scope.setState({parsedData: getLogData(event.target.result, scope.state.rsn)});\r\n        };\r\n\r\n        reader.readAsText(file);\r\n    }\r\n\r\n    render() {\r\n        let buttonProps = {disabled: !this.state.rsn};\r\n        const panes = [\r\n            {menuItem: 'Teammates', render: () => <ResultTable tableData={this.state.parsedData.otherPlayers}/>},\r\n            {menuItem: 'Loot', render: () => <LootTable tableData={this.state.parsedData.loot} rsn={this.state.rsn}/>},\r\n        ]\r\n\r\n        return (<>\r\n            <Header as='h2' icon textAlign='center'>\r\n                <Icon name='cogs' circular/>\r\n                <Header.Content>ToB Parser</Header.Content>\r\n            </Header>\r\n            <Grid centered columns={2} ui grid>\r\n                <GridRow><small><i>Select your raid tracker log file found at: C:\\Users\\[WINDOWS USER]\\.runelite\\raid-data tracker\\[RS LOGIN]\\tob\\raid_tracker_data.log</i></small></GridRow>\r\n                <GridRow>\r\n                    <GridColumn textAlign={\"right\"}>\r\n                        <Input placeholder='Enter RSN...' value={this.state.rsn} onChange={this.setRSN}/>\r\n                    </GridColumn>\r\n                    <GridColumn>\r\n                        <InputFile\r\n                            button={{...buttonProps}}\r\n                            input={{\r\n                                id: 'input-control-id',\r\n                                accept: \".log\",\r\n                                onChange: this.uploadFile.bind(this)\r\n                            }}\r\n                        />\r\n                        <Button animated='vertical' onClick={this.resetState}>\r\n                            <Button.Content hidden>Reset</Button.Content>\r\n                            <Button.Content visible>\r\n                                <Icon name='redo'/>\r\n                            </Button.Content>\r\n                        </Button>\r\n                    </GridColumn>\r\n                </GridRow>\r\n              {this.state.parsedData && <Summary summary={this.state.parsedData}/>}\r\n            </Grid>\r\n            <Grid centered columns={16}>\r\n                <GridRow>\r\n                    <GridColumn width={14}>\r\n                        {this.state.parsedData && <Tab panes={panes}/>}\r\n                    </GridColumn>\r\n                </GridRow>\r\n            </Grid>\r\n        </>)\r\n    }\r\n}\r\n\r\nexport default FileSelect","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport 'semantic-ui-css/semantic.min.css'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}